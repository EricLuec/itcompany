openapi: 3.1.0
info:
  title: IT-Company - OpenAPI 3.0
  description: This is a sample IT-Company.
  license:
    name: GNU Affero General Public License
    url: https://www.gnu.org/licenses/agpl-3.0.html
  version: 3.0.0
  servers:
    - url: 'http://localhost:8080'
tags:
  - name: building
    description: Everything about the company's buildings
  - name: employee
    description: View and manage the company's employees
  - name: inventory
    description: Operations about the company's inventories
  - name: items
    description: Operations about the items that the company owns
  - name: projects
    description: Operations about the company's projects
  - name: sector
    description: Operations about the sectors that the company covers
paths:
  /sectors:
    get:
      tags:
        - sector
      summary: Get all sectors
      responses:
        '200':
          description: List of sectors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sector'
    post:
      tags:
        - sector
      summary: Create a new sector
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sector'
      responses:
        '200':
          description: Sector created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sector'
  /sectors/{id}:
    get:
      tags:
        - sector
      summary: Get sector by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Sector found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sector'
        '404':
          description: Sector not found
    put:
      tags:
        - sector
      summary: Update a sector by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sector'
      responses:
        '200':
          description: Sector updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sector'
        '404':
          description: Sector not found
    delete:
      tags:
        - sector
      summary: Delete sector by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Sector deleted
  /buildings:
    get:
      tags:
        - building
      summary: Get all buildings
      responses:
        '200':
          description: List of buildings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
    post:
      tags:
        - building
      summary: Create a new building
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '200':
          description: Building created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
  /buildings/{id}:
    get:
      tags:
        - building
      summary: Get building by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Building found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: Building not found
    put:
      tags:
        - building
      summary: Update a building by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Building'
      responses:
        '200':
          description: Building updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '404':
          description: Building not found
    delete:
      tags:
        - building
      summary: Delete building by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Building deleted
  /employees:
    get:
      tags:
        - employee
      summary: Get all employees
      responses:
        '200':
          description: List of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      tags:
        - employee
      summary: Create a new employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
  /employees/{id}:
    get:
      tags:
        - employee
      summary: Get employee by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Employee found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
    put:
      tags:
        - employee
      summary: Update an employee by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Employee'
      responses:
        '200':
          description: Employee updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
        '404':
          description: Employee not found
    delete:
      tags:
        - employee
      summary: Delete employee by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Employee deleted
  /inventory:
    get:
      tags:
        - inventory
      summary: Get all inventories
      responses:
        '200':
          description: List of inventories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
    post:
      tags:
        - inventory
      summary: Create a new inventory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: Inventory created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
  /inventory/{id}:
    get:
      tags:
        - inventory
      summary: Get inventory by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Inventory found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '404':
          description: Inventory not found
    put:
      tags:
        - inventory
      summary: Update inventory by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '200':
          description: Inventory updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '404':
          description: Inventory not found
    delete:
      tags:
        - inventory
      summary: Delete inventory by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Inventory deleted
  /inventory/{inventoryId}/items:
    get:
      tags:
        - inventory
      summary: Get items of an inventory
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      tags:
        - inventory
      summary: Add item to inventory
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Updated inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
  /inventory/{inventoryId}/items/{itemId}:
    delete:
      tags:
        - inventory
      summary: Remove item from inventory
      parameters:
        - name: inventoryId
          in: path
          required: true
          schema:
            type: integer
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Updated inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
  /items:
    get:
      tags:
        - items
      summary: Get all items
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      tags:
        - items
      summary: Create a new item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /items/{id}:
    get:
      tags:
        - items
      summary: Get item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
    put:
      tags:
        - items
      summary: Update item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Item not found
    delete:
      tags:
        - items
      summary: Delete item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Item deleted
  /projects:
    get:
      tags:
        - projects
      summary: Get all projects
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      tags:
        - projects
      summary: Create a new project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
  /projects/{id}:
    get:
      tags:
        - projects
      summary: Get project by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Project found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
    put:
      tags:
        - projects
      summary: Update project by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
    delete:
      tags:
        - projects
      summary: Delete project by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Project deleted
  /invoices:
    get:
      tags:
        - invoices
      summary: Get all invoices
      responses:
        '200':
          description: List of invoices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
    post:
      tags:
        - invoices
      summary: Create a new invoice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '201':
          description: Invoice created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
  /invoices/{id}:
    get:
      tags:
        - invoices
      summary: Get invoice by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Invoice found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '404':
          description: Invoice not found
    put:
      tags:
        - invoices
      summary: Update invoice by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          description: Invoice updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '404':
          description: Invoice not found
    delete:
      tags:
        - invoices
      summary: Delete invoice by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Invoice deleted
  /budget:
    get:
      tags:
        - budget
      summary: Get current company budget
      responses:
        '200':
          description: The current budget
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyBudget'
  /budget/add:
    post:
      tags:
        - budget
      summary: Add funds to the budget
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: number
            format: double
          description: Amount to add
      responses:
        '200':
          description: Updated budget after adding funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyBudget'
  /budget/reserve:
    post:
      summary: Reserve funds from the budget
      tags:
        - budget
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: number
            format: double
          description: Amount to reserve
      responses:
        '200':
          description: Updated budget after reserving funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyBudget'
  /budget/debit:
    post:
      summary: Debit reserved funds
      tags:
        - budget
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: number
            format: double
          description: Amount to debit from reserved funds
      responses:
        '200':
          description: Updated budget after debiting funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyBudget'
  /budget/release:
    post:
      summary: Release previously reserved funds
      tags:
        - budget
      parameters:
        - in: query
          name: amount
          required: true
          schema:
            type: number
            format: double
          description: Amount to release back into available funds
      responses:
        '200':
          description: Updated budget after releasing funds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyBudget'
components:
  schemas:
    Sector:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        salaryClass:
          type: string
          enum: [ A, B, C, D ]
      required:
        - name
        - description
        - salaryClass
    Building:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        city:
          type: string
        capacity:
          type: integer
        sectorList:
          type: array
          items:
            $ref: '#/components/schemas/Sector'
        buildingDate:
          type: string
          format: date
      required:
        - name
        - city
        - capacity
        - buildingDate
    Employee:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        salary:
          type: integer
        sector:
          $ref: '#/components/schemas/Sector'
        manager:
          type: string
        complaints:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
        items:
          type: array
          items:
            type: string
        hireDate:
          type: string
          format: date
      required:
        - firstName
        - lastName
        - email
        - salary
        - hireDate
    Inventory:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        createdDate:
          type: string
          format: date
        building:
          $ref: '#/components/schemas/Building'
        responsibleEmployee:
          $ref: '#/components/schemas/Employee'
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        generalValue:
          type: integer
      required:
        - name
        - createdDate
        - generalValue
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        category:
          type: string
        price:
          type: integer
        purchaseDate:
          type: string
          format: date
      required:
        - name
        - price
        - purchaseDate
    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        manager:
          type: string
        creationDate:
          type: string
          format: date
        workerList:
          type: array
          items:
            type: string
        employees:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        budget:
          type: integer
        status:
          type: string
          enum: [ PLANNED, ACTIVE, COMPLETED ]
      required:
        - name
        - manager
        - budget
        - status
    Invoice:
      type: object
      properties:
        id:
          type: integer
          format: int64
        client:
          type: string
        project:
          $ref: '#/components/schemas/Project'
        issueDate:
          type: string
          format: date
        dueDate:
          type: string
          format: date
        amount:
          type: number
          format: float
        tax:
          type: number
          format: float
        discount:
          type: number
          format: float
        totalAmount:
          type: number
          format: float
        status:
          type: string
          enum: [ DRAFT, SENT, PAID, OVERDUE ]
      required:
        - client
        - issueDate
        - dueDate
        - amount
        - totalAmount
        - status
    CompanyBudget:
      type: object
      properties:
        id:
          type: integer
          format: int64
        totalFunds:
          type: number
          format: double
        reservedFunds:
          type: number
          format: double
        availableFunds:
          type: number
          format: double
      required:
        - totalFunds
        - reservedFunds
        - availableFunds
